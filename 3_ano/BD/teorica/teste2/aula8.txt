	Normalização

Desenho de base de dados
	-> preservação da informação
	-> Minimizar a redundância dos dados

Reduzir ao máximo o espaço ocupado por uma relação

Quando há muitos atributos que vão ficar null a maior parte das vezes ... deve-se criar uma nova relação para esses atributos

Eviatar esquemas de relação que estabeleçam relacionamentos entre duas relações baseados em atributos que não a chave primária e estrangeira -> spurious tuples

	Dependências Funcionais 
-> quando atributos da mesma relação dependem entre si

não pode ser inferida de uma qualquer instância da relação

Tipos DPs:
. D. Parcial -> atributo depende de parte dos atributos que compõem a chave da relação
. D. Total -> atributo depende de toda a chave da relação
. D. Transitiva -> atributo que não faz para da chave da relação depende de um atributo que também não faz parte da chave da relação

	NORMALIZAÇÃo
Objetivo: Reduzir Redundância

DFs não desejadas -> Redundância

Formas Normais -> conjunto de testes(condições) para validação de cada forma. Cada gorma superior tem menos Dfs que a anterior

	1NF
-> Atributos atómicos (não há atributos multivalor)
-> Não suporta relações dentro de relações(Nested Relation)

Resolver multivalor -> criar nova tabela para esse atributo (melhor solução)

Resolver Nested Relations -> Decompor a relação em duas relações na 1NF

	2NF
-> Está na 1NF
-> não existem dependências parciais

Resolver DParciais -> Decompor a relação. Todas as dependências parciais resultam numa nova tabela. Verificar mesmo assim se tabelas resultantes não continuam com dparciais.

	3NF
-> Está na 2NF
-> Nã existem dependências transitivas

Resolver -> idêntico à 2NF

	Boyce-Codd NF (BCNF)
-> Está na 3FN
-> Todos os atributos são funcionalmente dependentes da chave da relação, de toda a chave e nada mais.

Resolver -> decompor

Ponto de equilibrio entre 3NF e BCNF

Casos Raros
	4NF
-> Está na BCNF
-> Não existem dependências multivalor (depende de vários atributos)

	5NF
-> Está na 4NF
-> A relação não pode ser mais decomposta sem haver perda de informação
-> Não existem dependências de junção (ver)





