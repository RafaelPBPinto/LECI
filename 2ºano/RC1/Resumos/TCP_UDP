	Serviços e protocolos de transporte

=> permite comunicção lógica entre processos de apliacações que em funcionamento em diferentes hosts
=> sender side: breaks application messages into
		segments, passes to network layer
		
	receiver side: reassembles
			segments into messages,
			passes to application layer
			
=>dois tipos de transporte para as aplicações => TCP e UDP

TCP=>fiável,garante que todos os pacotes não se percam.
UDP=>não fiável, pode haver perdas de pacotes pelo meio.

AMBOS=> não podem ter garantia do delay
	não garantem uma bandwith
	
TCP socket identified by 4-tuple:
 source IP address
 source port number
 destination IP address
 destination port number

receiver host uses all four values to direct segment to appropriate socket

Web servers have different sockets for each connecting client





	UDP

=> troca de dados entre apliacações pel header e porto identificador
=>multi-point communications
=>não sabe se há perda de pacotes

	TCP
	
=>point-to-point
=>não preserva ordem
=>pipelined
=>send & receive buffers
=>full duplex data=> bi-directionla dat flow in same connection=> tem MTU
=>control messages before data flow
=>flow controlled=> sender will not overwhelm receiver


	Iniciar ligação 
client		server

SYN -------> SYN,ACK
ACK <-------
    -------> ligação estabelicida
    
	Terminar ligação
FYN -------> ACK (envio dos dados restantes)
    <------- Fin,ACK
ACK -------> terminou a ligação 

Flow control
=> recetor notifica quantos bytes pode receber

	Header Fields

Seq => data already sent
ACK => data already received
W   => how many octets is ready to receive
Seq refere-se ao lado da transmissão, o Ack e o W refere-se ao contrário

EstimatedRTT = (1- a)*EstimatedRTT + a*SampleRTT
usually a=0.125

DevRTT = (1-b)*DevRTT + b*|SampleRTT-EstimatedRTT|
(typically, b = 0.25)

TimeoutInterval = EstimatedRTT + 4*DevRTT

TCP - retransimission 

Tahoe
1 - conexão começa devegar e aumenta o envio de pacotes exponencialmente até o primeiro pacote ser perdido (incrementando o CongWin por cada ACK recebido)

2 - quando perde o primeiro pacote é mantida essa velocidade até receber 3 acks repetidos* e depois volta à velocidade inicial e cresce exponencialmente ate theresholds

3 - quando chega a metade do congwin máximo a window é aumentada mais devagar para evitar congestionamento, aumenta linearmente

*quando são recebidos 3 acks repetidos (deteta pacote não enviado) é retransmitido o segmento de dados em falta antes do timeout

