// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 17.1.0 Build 590 10/25/2017 SJ Lite Edition"

// DATE "03/22/2021 15:50:34"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module mux21_1 (
	inputs,
	sel,
	outMux);
input 	[1:0] inputs;
input 	sel;
output 	outMux;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \outMux~output_o ;
wire \inputs[1]~input_o ;
wire \inputs[0]~input_o ;
wire \sel~input_o ;
wire \outMux~0_combout ;


cycloneive_io_obuf \outMux~output (
	.i(\outMux~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\outMux~output_o ),
	.obar());
// synopsys translate_off
defparam \outMux~output .bus_hold = "false";
defparam \outMux~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \inputs[1]~input (
	.i(inputs[1]),
	.ibar(gnd),
	.o(\inputs[1]~input_o ));
// synopsys translate_off
defparam \inputs[1]~input .bus_hold = "false";
defparam \inputs[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \inputs[0]~input (
	.i(inputs[0]),
	.ibar(gnd),
	.o(\inputs[0]~input_o ));
// synopsys translate_off
defparam \inputs[0]~input .bus_hold = "false";
defparam \inputs[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \sel~input (
	.i(sel),
	.ibar(gnd),
	.o(\sel~input_o ));
// synopsys translate_off
defparam \sel~input .bus_hold = "false";
defparam \sel~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \outMux~0 (
// Equation(s):
// \outMux~0_combout  = (\sel~input_o  & (\inputs[1]~input_o )) # (!\sel~input_o  & ((\inputs[0]~input_o )))

	.dataa(\inputs[1]~input_o ),
	.datab(\inputs[0]~input_o ),
	.datac(gnd),
	.datad(\sel~input_o ),
	.cin(gnd),
	.combout(\outMux~0_combout ),
	.cout());
// synopsys translate_off
defparam \outMux~0 .lut_mask = 16'hAACC;
defparam \outMux~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign outMux = \outMux~output_o ;

endmodule
